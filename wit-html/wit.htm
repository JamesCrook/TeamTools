<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>What is That?</title>
    <style type="text/css">

        html *
        {
            font-family: Arial;
        }

    </style>
    <script src="./js/boxes.js"></script>
    <script src="./js/vec2.js"></script>
    <script>

        var Message = null;
        var Clicker = {};
        var Gui = {};
        var Level = 0;
        var Moving = true;


        // @return var
        function FindBox(Source, x, y){

            var i;
            var v;
            var boxes = Source.Boxes[ Level ];
            Source.ThisIx = -1;
            //console.log( "Finding x:"+x+" y:"+y);
            for( i = 0; i < boxes.length; i++ ){
                v = boxes[i];
                if( (v[0] <= x) && (v[1] <= y) && ( v[2] >= x ) &&
                        (v[3] >= y ) ){
                    Source.ThisIx = i;
                    break;
                }
            }
            return Source.ThisIx;
        }

        function Extract( List, from, to, level ){
            var result = [];
            var i;
            for( i=from;i<to;i++){
                if( List[i][0]==level ){
                    var Item = List[i];
                    var Entry =
                        [ Item[1], Item[2], Item[3], Item[4], Item[5],i];
                    result.push( Entry );
                }
            }
            return result;
        }

        function GuiInit(){
            //Gui.Boxes = [ image_boxes, [], [] ];
            Gui.Boxes = [ Extract( AudacityBoxes, 0, AudacityBoxes.length, 3),[],[]];
            Gui.Img = document.getElementById("Gui");
            Gui.Canvas = document.getElementById("GuiCanvas");
            Gui.Ctx = Gui.Canvas.getContext("2d");
            Gui.LastIx = -2;
            Gui.ThisIx = -1;
            Gui.Rect = [0,0,865,583];
            Gui.BackDraw = function() { Gui.Ctx.drawImage(Gui.Img, 0, 0);}
            Gui.FrontDraw = function( x,y,w,h ){
                Gui.Ctx.drawImage(Gui.Img, x, y, w, h, x, y, w, h);
            }
        }

        function ClickerInit(){
            //Clicker.Boxes = [ clicker_boxes, [],[]];
            Clicker.Boxes = [ Extract( AudacityBoxes, 0, AudacityBoxes.length, 3),[],[]];
            Clicker.Img = document.getElementById("Gui");
            Clicker.Canvas = document.getElementById("GuiCanvas");
            Clicker.Ctx = Gui.Canvas.getContext("2d");
            Clicker.LastIx = -2;
            Clicker.ThisIx = -1;
            Clicker.Rect = [0,583,1225,740];
            Clicker.BackDraw = RedrawClicker;
            Clicker.FrontDraw = function( x,y,w,h ){;}
        }

        function ChangeLevel( delta ){
            if( Level + delta > 2 ){
                return;
            }
            if( (Level + delta) < 0 ){
                return;
            }
            if( (delta == 1) && (Level ==0)){
                var row = Gui.Boxes[ Level][ Gui.ThisIx];
                if( row.length < 7 ){
                    return;
                }
                Gui.Boxes[ Level+1 ] = row[6];
                row = Clicker.Boxes[ Level][ Clicker.ThisIx];
                Clicker.Boxes[ Level+1 ] = row[6];
                Level += 1;
            }
        }


        function RedrawClicker(){
            var G = Clicker;
            var i;
            var Box;
            var XX = 40;
            var YY = Gui.Img.height;
            var w, h;
            var str;
            h = 30;
            G.Ctx.font = "18px Arial";
            G.Ctx.fillStyle = 'white';
            G.Ctx.fillRect(0, YY, G.Canvas.width, G.Canvas.height-YY);
            G.Ctx.fillStyle = 'blue';
            YY+=4;
            //G.Ctx.clearRect(0,0, G.Canvas.width, G.Canvas.height);
            for( i = 0; i < G.Boxes[Level].length; i++ ){
                Box = G.Boxes[Level][i];
                str = Box[4];
                w = G.Ctx.measureText(str).width + 30;
                if( (XX + w) > (1225-40) ){
                    YY += 30;
                    XX = 40;
                }
                G.Ctx.fillText(str, XX + 15, YY + 22);
                Box[0] = XX;
                Box[1] = YY;
                XX += w;
                Box[2] = XX;
                Box[3] = YY + h;

            }
            //G.Img.src = G.Canvas.toDataURL("image/png");
        }

        window.onload = function(){
            Message = document.getElementById("message");
            GuiInit();
            ClickerInit();
            Refresh( Gui, false );
            Refresh( Clicker, false );
        }

        function RefreshImage(Gui, backfade){
            Gui.BackDraw();
            //Gui.Ctx.drawImage(Gui.Img, 0, 0);
            if( Gui.ThisIx < 0 )
                return;
            var box = Gui.Boxes[ Level][Gui.ThisIx];
            var x = box[0];
            var y = box[1];
            var w = box[2] - box[0];
            var h = box[3] - box[1];

            if( backfade ){
                Gui.Ctx.globalAlpha = 0.85;
                Gui.Ctx.fillStyle = 'white';
                var R = Gui.Rect;
                Gui.Ctx.fillRect(R[0],R[1], R[2]-R[0], R[3]-R[1]);
                Gui.Ctx.globalAlpha = 1.0;
                Gui.FrontDraw( x, y, w, h );
            } else {
                Gui.Ctx.globalAlpha = 0.1;
                Gui.Ctx.fillStyle = 'blue';
                Gui.Ctx.fillRect(x, y, w, h);
                Gui.Ctx.globalAlpha = 1.0;
            }

            Gui.Ctx.strokeStyle = 'blue';
            Gui.Ctx.lineWidth = 4;
            Gui.Ctx.beginPath();
            Gui.Ctx.rect(x, y, w, h);
            Gui.Ctx.stroke();
        }

        function Arrow( v1,v2 ){
            var d1 = v2.sub(v1);
            var d2 = d1.normal();
            var d3 = d1.normalPerp();
            var u1 = v1;
            var u2 = v1.add( d1).sub( d2.times( 27 ));
            var u3;
            Gui.Ctx.strokeStyle = 'black';
            Gui.Ctx.lineWidth = 4;
            Gui.Ctx.beginPath();
            Gui.Ctx.moveTo(u1.x(), u1.y());
            Gui.Ctx.lineTo(u2.x(), u2.y());
            Gui.Ctx.stroke();

            Gui.Ctx.fillStyle = 'black';
            u1 = u2.add( d3.times(5) );
            u3 = u2.add( d2.times(22) );
            u2 = u2.sub( d3.times(5) );
            Gui.Ctx.beginPath();
            Gui.Ctx.moveTo(u1.x(), u1.y());
            Gui.Ctx.lineTo(u2.x(), u2.y());
            Gui.Ctx.lineTo(u3.x(), u3.y());
            Gui.Ctx.fill();
            //console.log( v2.x );
            //console.log( "from "+v1.asText()+" to "+v2.asText());

        }

        function ConnectBoxes(){
            if( Gui.ThisIx < 0 )
                return;
            if( Clicker.ThisIx < 0 )
                return;
            var b1 = Gui.Boxes[ Level][Gui.ThisIx ];
            var b2 = Clicker.Boxes[ Level][Clicker.ThisIx ];

            var x1 = (b1[0]+b1[2])/2;
            var y1 = b1[3];
            var x2 = (b2[0]+b2[2])/2;
            var y2 = b2[1];
            Arrow( Vec2(x2,y2), Vec2( x1,y1)  );
            Moving = false;
        }

        var lastIx = -1;

        function Refresh(Source, isclick){

            if( Source.ThisIx != Source.LastIx ){
                Source.LastIx = Source.ThisIx;
                if( Source.ThisIx >= 0 ){
                    var B = Gui.Boxes[Level][Source.ThisIx];
                    Message.innerHTML = B[4] + "<br>:"+B[0]+":"+B[1]+":"+B[2]+":"+B[3];
                }
                else
                    Message.innerHTML = 'None';
                RefreshImage(Source, isclick);
            }
            else if( isclick ){
                RefreshImage(Source, isclick);
            }
            //alert( "X:"+ XX + " Y:"+ YY + " ix:"+ixx);
        }

        function ImageClick(event, isclick){
            var XX = event.offsetX;
            var YY = event.offsetY;
            var box1 = FindBox(Gui, XX, YY);
            var box2 = FindBox(Clicker, XX, YY);
            if( isclick ){
                console.log("x:" + XX + " y:" + YY + " Box1:" + box1 + " Box2:" + box2 );
            }
            if( Level < 2 ){
                if( box1 < 0 )
                    Gui.ThisIx = box2;
                else if( box2 < 0 )
                    Clicker.ThisIx = box1;
            }
            //var Change = (Gui.ThisIx != Gui.LastIx) || ( Clicker.ThisIx != Clicker.LastIx);

            if( Moving || isclick ){
                Refresh(Gui, isclick);
                Refresh(Clicker, false);
            }
            if( isclick){
                ConnectBoxes();
                if( Gui.ThisIx < 0 ){
                    Level = 0;
                    Moving = true;
                }
                else
                    ChangeLevel(1);
            }
        }
    </script>
</head>
<body>

<div style="width:100%; text-align:center">
    <h1>The Audacity "What is That?" Help Page</h1>
    <h2>Click on the diagram to find out more</h2>
    <div style="width:1225px;position:relative;display:inline-block;margin-left:auto;margin-right:auto;">
        <canvas id="GuiCanvas"
                style="position:absolute;left:0px;top:0px;"
                height="740px"
                width="1225px"
                OnClick="ImageClick(event,true);"
                OnMouseMove="ImageClick(event,false)"
                alt="Clickable Canvas"></canvas>
        <iframe id="scroller" style="position:absolute;left:865px;top:0px;"
                height="583px"
                width="350px"
                src="./scroller-contents/top_menu.html"
                seamless></iframe>
    </div>
</div>
<div id="message">some message</div>
<img id="Gui" src="./images/blank-links.png"
     style="display:none;"
     alt="Audacity">
</body>
</html>