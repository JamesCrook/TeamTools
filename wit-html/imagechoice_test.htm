<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Automation Images</title>
    <style type="text/css">
        h1 { font-size: 2em; }
        h2 { font-size: 1.5em; }
        h3 { font-size: 1.17em; }
        h4 { font-size: 1.12em; }
        h5 { font-size: .83em; }
        h6 { font-size: .67em; }

        html *
        {
            font-family: Arial;
        }

        #logoback {
            transition: all 0.15s;
            background-color: #edebfc;
            border: 2px solid;
            border-color: #edebfc;
            position:absolute;
            top:1.25em;
            left:0.9375em;
            width:5.75em;
            height:5.75em;
            color:black;
            box-sizing:border-box;
            line-height:5.75em;
            border-radius:2.875em;
            box-shadow:0px 0px 1.25em 1px #000080;"

        }
        #logoback:hover {
            /*background-color: #c7cfff;*/
            border-color: #848ff8;
        }
        #logo
        {
            position:relative;
            top:0.5em;
            left:0.5625em;
            transition: all 0.1s;
            width:4.375em;
            height:4.375em;

        }
        #logo:hover
        {
            /*top:6px;*/
            /*transform: rotate(10deg);*/
        }
        #logo:hover:active {
            width:5em;
            height:5em;
            left:0.25em;
            top:0.0625em;
        }

        div.bt {

            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;

            display:inline-block;
            color:black;
            font-size:13px;
            border: 1px solid;
            padding:2px 15px 2px 15px;
            border-color: #8696b2;
            background-color: #c5d4fc;
            box-shadow: inset 0 -5px 5px 0 #a6c1e7;
        }
        div.bt:hover {
            cursor: pointer;
            /*box-shadow: inset 0 -5px 15px 0 #7c94b7;*/
            background-color: #a9bdff;
            border-color: #2130ba;
        }
        div.bt:hover:active {
            background-color: #a5c3ee;
            box-shadow: inset 0 2px 5px 0 #7c94b7;
        }
        div.linky {
            transition: all 0.15s;
            display:none;
            background-color: #c5d4fc;
            border: 2px solid;
            border-color: #c5d4fc;
            /*border-color: #8696b2;*/
            padding:0px 1.25em 0px 1.25em;
            color:black;
            height:2.25em;
            line-height:2.25em;
            box-sizing:border-box;
            border-radius:1.25em;
            margin:0 auto;
            box-shadow:0 0 20px 1px #000080;
            cursor: pointer;

        }
        div.linky:hover {
           /* background-color: #a5c3ee;*/
            border-color: #848ff8;

        }

        div.pos-resetter {
            width:100%;
            display:inline-block;
            text-align:center;
            position:absolute;
            margin:0 auto;
        }

        div.detaildiv
        {
            padding: 20px;
            box-sizing: border-box; /* so the div is exactly the requested size.*/
            border: 1px solid #000;
            border-radius: 5px;
            -moz-border-radius: 5px;
            text-align:left;
            margin:0px;
        }

        div.detaildiv a
        {
            color: #f5b40b;
        }

        img.centred {
            position: absolute;
            top: -9999px;
            left: -9999px;
            bottom: -9999px;
            right: -9999px;
            margin:auto;
        }
    </style>
    <script>
        console.log( "Protocol is "+window.location.protocol);
        if (window.location.protocol == "http:"){
            console.log("Http: detected");
            if( window.location.href.indexOf("localhost") < 0 )
                window.location.href = "https:" + window.location.href.slice(5);
        }

        var Annotator = {};

        var A=Annotator;
        A.Porthole = {};
        A.Porthole.topExtra = 24;
        A.Porthole.width = 877;
        A.Porthole.height = 403+A.Porthole.topExtra;
        A.Porthole.margin = 5;
        A.Image = {};
        A.Image.width = 877;
        A.Image.height = 403;
        A.Image.imageSrc = './auto_images/SpectralVocalDark256Dark.png';
        A.Hotspots = {};
        A.Hotspots.imageSrc = './images/SpectralVocalDark256DarkHS.png';
        A.Focus = {};
        A.Focus.radius = 75;
        A.Detail = {};
        A.Detail.width = 400;
        A.Detail.height = 300;

        A.Hotspots.Colours = [];
        A.Hotspots.HoverActions = [];
        A.Hotspots.ClickActions = [];
        A.Hotspots.numKeys = 0;

        A.Buttons = {};
        A.Buttons.Names = [];
        A.Buttons.numButtons = 0;
        A.Buttons.chosen = 0;


        A.AddHot = function (r,g,b,a,click){
            var index = "("+r+","+g+","+b+","+a+")";
            A.Hotspots.Colours[ index ] = 1+A.Hotspots.numKeys++;
            A.Hotspots.ClickActions.push( click );
        };

        A.AddDetail = function ( title, text ){
            A.Hotspots.HoverActions.push(
                "DETAIL:<h1>" + title + "</h1><p><em>"+text+"</em></p>"
                );
        };

        A.AddButton = function( text, src ){
            A.Buttons.Names.push( text );
            //A.Buttons.Links.push( src );
            A.Buttons.numButtons++;
            A.AddHot(0,0,A.Buttons.numButtons,255,src);
        };

        A.AddButton(  "256", './auto_images/SpectralVocalDark256Dark.png');
        A.AddButton(  "512", './auto_images/SpectralVocalDark512Dark.png');
        A.AddButton( "1024", './auto_images/SpectralVocalDark1024Dark.png');
        A.AddButton( "2048", './auto_images/SpectralVocalDark2048Dark.png');
        A.AddButton( "4096", './auto_images/SpectralVocalDark4096Dark.png');
        A.AddButton( "8192", './auto_images/SpectralVocalDark8192Dark.png');

        A.AddDetail(  "256: Most Narrow Band","This window size gives the spectrogram the best temporal resolution, but the worst frequency resolution.");
        A.AddDetail(  "Window size 512","Frequencies are not as clear as at window size of 2048 and above");
        A.AddDetail(  "Window size 1024","A good compromise.");
        A.AddDetail(  "Window size 2048","The duration of the silences before the 'd' and 't' in 'Audacity' are a lot less clear than for smaller window sizes.");
        A.AddDetail(  "Window size 4096","All sounds are shown as having longer duration than they really do");
        A.AddDetail(  "8192: Most Wide Band","This window size gives the spectrogram the worst temporal resolution and the best frequency resolution.");


        // Widgets
        A.AddHot(170,136,221,255); // tcp
        A.AddHot(187,238,170,255); // freq
        A.AddHot(136,221,238,255); // win-size
        // Spectrogram
        A.AddHot(102,153, 85,255); // Au
        A.AddHot(238,221,136,255); // -d
        A.AddHot(221,119, 17,255); // a
        A.AddHot(221, 17,221,255); // sss
        A.AddHot(221, 17, 51,255); // i
        A.AddHot( 68,170, 68,255); // t
        A.AddHot( 85,102,204,255); // y

        A.AddDetail( "Track Control Panel","The <a href='https://manual.audacityteam.org/man/track_control_panel_and_vertical_scale.html'>Track Control Panel (TCP)</a> in Audacity contains controls used, for example, to adjust the loudness of the track.");
        A.AddDetail( "", "<h2>Frequency Scale</h2>The spectrogram is a plot showing how the frequencies of a sound vary over time. The <b>frequency scale</b> runs from 0 KHz to 8 KHz.</p><p>This spectrogram shows a plot for the word 'Audacity'. </p><p>The most intense sounds are shown in white, then red, purple, blue, with black indicating no intensity at that frequency at that time.");
        A.AddDetail( "Window Size", "Small windows sizes measure frequency over a short time range.  This is good when the frequencies change quickly.</p><p>Where the frequencies are sustained over longer time periods, larger window sizes give more precision about what the frequencies are.</p><p>The number for 'window size' is 'the number of audio samples'.");
        A.AddDetail( "<em style='color: #ffc747'>Aw</em>-dasssi-tee","The initial vowel sound in the word 'Audacity'  The sound changes slightly over the duration of the vowel as the lips move closer together and are rounded more towards the end of the vowel sound.");
        A.AddDetail( "Aw<em style='color: #ffc747'>-d</em>asssi-tee", "The 'd' consonant sound in 'Audacity'.  There is a moment of near silence just before the 'd'.");
        A.AddDetail( "Aw-d<em style='color: #ffc747'>a</em>sssi-tee", "The second vowel sound in 'Audacity' just before the loud 'sss' sound.  The pitch rises slightly towards the end as the mouth closes somewhat for the next sound.");
        A.AddDetail( "Aw-da<em style='color: #ffc747'>sss</em>i-tee", "The 'sss' sound of the 'c' in 'Audacity'.  The bright region at about 5KHz is showing many frequencies, all quite loud.</p><p>This sound is similar to the sound of <a href='https://manual.audacityteam.org/man/noise.html'>'white noise'</a> which also has many frequencies at once.");
        A.AddDetail( "Aw-dasss<em style='color: #ffc747'>i</em>-tee", "The 'i' vowel sound in 'Audacity'");
        A.AddDetail( "Aw-dasssi<em style='color: #ffc747'>-t</em>ee", "The 't' consonant sound in the word 'Audacity'.  There is a moment of near silence just before the 't'.");
        A.AddDetail( "Aw-dasssi-t<em style='color: #ffc747'>ee</em>", "The 'y' vowel sound in 'Audacity'.");




        var Status = {};
        Status.OldHit = -1;
        Status.imagesToCome = 2;

        var Message;
        var Message2;


        function ResizeDivs(){
            var A = Annotator;
            A.MainDiv.style.width = A.Porthole.width+'px';
            A.MainDiv.style.height = A.Porthole.height+'px';
            A.BackingCanvas.width = A.Porthole.width;
            A.BackingCanvas.height = A.Porthole.height;
            A.FocusCanvas.width = A.Porthole.width;
            A.FocusCanvas.height = A.Porthole.height;
            A.DetailDiv.style.width = A.Detail.width+'px';
            A.DetailDiv.style.height = A.Detail.height+'px';
        }

        function drawButtons(){
            var A = Annotator;
            var xw = 60;
            var yh = 25;
            var gap = 9;
            var n = A.Buttons.numButtons;
            var m = 1;
            // grid of n by m buttons, with gaps between them.
            var x = (A.Porthole.width  - n *(xw+gap) + gap) *0.5;
            var y = 0;//(A.Porthole.height - m *(yh+gap) + gap) *0.5;
            var ctx = A.BackingCanvas.ctx;
            var ctx2 = A.Hotspots.ctx;
            ctx.lineWidth = 3;
            ctx.font="16px Arial";
            ctx.strokeStyle = "rgba( 55, 55,155,1.0)";
            ctx2.lineWidth = 0;

            var i;
            for( i=0;i<n;i++){
                var xx = x + i * (xw + gap);
                var yy = y + 1;
                ctx.beginPath();
                if( i== A.Buttons.chosen )
                    ctx.fillStyle = "rgba(255,255,255,1.0)";
                else
                    ctx.fillStyle = "rgba(205,205,205,1.0)";

                ctx.rect(xx, yy, xw, yh);
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = "rgba(0,0,0,1.0)";
                ctx.fillText(A.Buttons.Names[i], xx+11, yy+18 );
                ctx2.beginPath();
                ctx2.fillStyle = "rgba(0,0,"+(i+1)+",1.0)";
                ctx2.rect( x + i*(xw+gap), y+ 0*(yh+gap), xw, yh);
                ctx2.fill();
            }
        }



        function anotherImageReady(){
            Status.imagesToCome--;
            if( Status.imagesToCome > 0 )
                return;
            Status.isAppReady = true;
            drawButtons();
        }

        function onBackingImage(){
            var A = Annotator;
            var img = A.Backing.img;
            A.BackingCanvas.ctx.drawImage(img, 0, A.Porthole.topExtra, img.width, img.height);
            anotherImageReady();
        }


        function onHotspotImage(){
            var A = Annotator;
            A.Hotspots.canvas.width = A.Porthole.width;
            A.Hotspots.canvas.height = A.Porthole.height;
            A.Hotspots.ctx = A.Hotspots.canvas.getContext('2d');
            var img = A.Hotspots.img;
            A.Hotspots.ctx.drawImage(img, 0, A.Porthole.topExtra, img.width, img.height);
            anotherImageReady();
        }

        function onFailedImage(){
            alert("Image failed to load");
        }

        function detailPosFromCursorPos( x,y ){
            var A = Annotator;
            var pt = {};
            // get position as somewhere in range -1..+1
            var vx = 2.0*x/A.Porthole.width-1;
            var vy = 2.0*y/A.Porthole.height -1;

            // Detail panel will be hard right or hard left.
            vx = (vx>0) ? -1:1;

            // Message2.innerHTML = "Vec: ("+vx+","+vy+")";
            pt.x = (vx+1) * (A.Porthole.width - A.Detail.width) * 0.5;
            pt.y = (vy+1) * (A.Porthole.height - A.Detail.height) * 0.5;

            return pt;
        }

        function drawFocusSpot( x, y ){
            var A = Annotator;

            var ctx= A.FocusCanvas.ctx;

            // Draw the white translucent rectangle
            ctx.globalCompositeOperation = 'source-over';
            ctx.clearRect(0, 0, A.Porthole.width, A.Porthole.height);
            // Don't draw focus spot if in the extra strip at the top.
            if( y < A.Porthole.topExtra )
                return;

            ctx.fillStyle = "rgba( 255,255,255,0.5)";
            var m1 = A.Porthole.margin;
            var m2 = A.Porthole.topExtra + m1;
            ctx.fillRect(m1,m2, A.Porthole.width-2*m1, A.Porthole.height-2*m1);

            // Cut out the viewing circle
            ctx.fillStyle = "rgba(0,0,0,1.0)";
            ctx.globalCompositeOperation = 'destination-out';
            ctx.beginPath();
            ctx.arc( x, y, A.Focus.radius, 0, Math.PI * 2.0, true );
            ctx.closePath();
            ctx.fill();
        }

        function removeAdornments(e){
            if( !Status.isAppReady )
                return;
            if( e.shiftKey )
               return;
            var A = Annotator;
            var ctx= A.FocusCanvas.ctx;
            ctx.globalCompositeOperation = 'source-over';
            ctx.clearRect(0,0, A.Porthole.width, A.Porthole.height);
            A.DetailDiv.style.display = "none";
            Status.OldHit = -1;
        }

        function hitFromCursorPos( x, y ){
            var A=Annotator;
            if( !A.Hotspots.ctx )
                return -1;
            var pixel = A.Hotspots.ctx.getImageData(x,y,1,1).data;
            var result= "("+pixel[0]+","+pixel[1]+","+pixel[2]+","+pixel[3]+")";
            var value = A.Hotspots.Colours[result] || 0;
            Message2.innerHTML = "Rgba" + result + ": Region "+value;
            return value-1;
        }


        function setNewImage( url ){
            var A=Annotator;
            Status.imagesToCome++;
            A.Backing.img.src = url;
        }

        // Happens on mouse move events
        function onFocusSpotMoved(e){
            if( !Status.isAppReady )
                return;

            var A=Annotator;
            if( e.shiftKey )
               return;

            var x = e.clientX -A.MainDiv.offsetLeft;
            var y = e.clientY -A.MainDiv.offsetTop;
            var coordinates = "Coordinates: (" + x + "," + y + ")";

            var pt = detailPosFromCursorPos( x, y);

            drawFocusSpot( x,y );
            var hit = hitFromCursorPos(x,y);
            Message.innerHTML = coordinates;
            A.DetailDiv.style.left = pt.x+"px";
            A.DetailDiv.style.top = pt.y+"px";
            if( Status.OldHit != hit ){
                Status.OldHit = hit;
                A.DetailDiv.style.display = (hit+1)?"block":"none";
                if( hit >= 0 ){
                    var action = A.Hotspots.HoverActions[ hit ];
                    A.DetailDiv.innerHTML = action.substr( 7 );
                    action = A.Hotspots.ClickActions[ hit ];
                    if( action ){
                        A.Buttons.chosen = hit;
                        setNewImage(action);
                    }
                }
            }
        }

        function onFocusClicked(e){
            if( !Status.isAppReady )
                return;

            var A=Annotator;
            if( e.shiftKey )
                return;

            var x = e.clientX -A.MainDiv.offsetLeft;
            var y = e.clientY -A.MainDiv.offsetTop;
            var hit = hitFromCursorPos(x,y);
            if( hit>=0 ){
                var action = A.Hotspots.ClickActions[ hit ];
                if( action )
                    alert( action );
            }
        }

        function createDomElements(){
            var A=Annotator;
            var contentHere= document.getElementById("content_here");

            // Used for debugging messages
            Message= document.getElementById("message");
            Message2= document.getElementById("message2");

            // MainDiv contains all the other divs
            A.MainDiv = document.createElement( "div");
            // Backing canvas has the image drawn into it
            A.BackingCanvas = document.createElement( "canvas" );
            // Focus canvas has the white-out with focus circle
            A.FocusCanvas = document.createElement( "canvas" );
            // Detail div floats above the white-out
            A.DetailDiv = document.createElement( "div" );

            contentHere.appendChild( A.MainDiv );
            A.MainDiv.appendChild( A.BackingCanvas );
            A.MainDiv.appendChild( A.FocusCanvas );
            A.MainDiv.appendChild( A.DetailDiv );

            A.MainDiv.style.position="relative";
            A.MainDiv.style.display="inline-block";
            A.MainDiv.style.marginLeft="auto";
            A.MainDiv.style.marginRight="auto";
            A.MainDiv.style.overflow="hidden";

            A.BackingCanvas.style.position = "absolute";
            A.BackingCanvas.style.left = "0px";
            A.BackingCanvas.style.top = "0px";
            A.BackingCanvas.ctx = A.BackingCanvas.getContext('2d');

            A.FocusCanvas.onmousemove=onFocusSpotMoved;
            A.FocusCanvas.onmouseout=removeAdornments;
            A.FocusCanvas.onclick=onFocusClicked;

            A.FocusCanvas.style.position = "absolute";
            A.FocusCanvas.style.left = "0px";
            A.FocusCanvas.style.top = "0px";
            A.FocusCanvas.ctx = A.FocusCanvas.getContext('2d');

            A.DetailDiv.innerHTML="Some Text";
            A.DetailDiv.style.backgroundColor = "rgba(0,0,0,0.6)";
            A.DetailDiv.style.position = "absolute";
            A.DetailDiv.style.left = "0px";
            A.DetailDiv.style.top = "0px";

            A.DetailDiv.style.display = "none";
            A.DetailDiv.className = "detaildiv";
            ResizeDivs();

        }

        function requestImages(){
            var A=Annotator;
            //Status.isAppReady = true;
            A.Hotspots.img = document.createElement('img');
            A.Hotspots.canvas = document.createElement('canvas');
            A.Hotspots.img.onload = onHotspotImage;
            A.Hotspots.img.onerror = onFailedImage;
            A.Hotspots.img.src = A.Hotspots.imageSrc;

            A.Backing = {};
            A.Backing.img = document.createElement( "img");
            A.Backing.img.onload = onBackingImage;
            A.Backing.img.onerror = onFailedImage;
            A.Backing.img.className="centred";
            A.Backing.img.src = A.Image.imageSrc;
        }

        window.onload = function(){
            createDomElements();
            requestImages();
        }

    </script>
</head>
<body style="color:white;background-image:url(images/header-home-bg.jpg);margin:0px;background-attachment:fixed;">
<div style="width:100%; text-align:center;background:#1d2134;height:5em;margin: 0px;">
    <h1 style="margin:0px;padding-top:0.65em;padding-bottom:0.9em;"><em>Audacity Toolbox</em>: Image Choice Test</h1>
    <div style="width:100%; text-align:center;background:#303b70;position:relative;height:1.8em;top:-0.6em;box-shadow: inset 0 0px 4px 0px #000080, 0 -2px 7px -2px #618ef4;"></div>
</div>
<div style="width:100%;position:relative;top:-0.50em;left:0;display:inline-block;margin:0 auto;height:3em;">
    <div class='pos-resetter'>
        <h2 id="click-tip" style="color:#bfbfbf;display:block;position:relative;top:-0.55em;transition:opacity 4s;opacity:1;"><em>Version from 14-Nov-2019</em></h2>
    </div>
    <div class='pos-resetter'>
        <div style="display:inline-block;">
            <div class='linky' id="manual-url-holder">
                Manual's URL, here</div> &nbsp;
            <div class='linky' id="wit-url-holder">
                WIT's URL, here</div> &nbsp;
            <div class='linky' id="doxy-url-holder">
                Doxygen's URL, here</div>
        </div>
    </div>
</div>
<a  href="https://www.audacityteam.org">
    <div id="logoback" >
        <img id='logo' src="images/audacity-logo.png">
    </div>
</a>
<div style="height:1.9em;"></div>

<div id="content_here" style="text-align:center;">
</div>

<div style="text-align:center;">
    <br><em>Spectrogram of the word 'Audacity'</em><br>
</div>

<div style="margin-left:10px">
    <div id="message"></div>
<div id="message2"></div>
</div>
<div style="margin-left:50px">
<p>Test of the ImageChoice component of the Audacity Toolbox.
<ul>
    <li>Click on choices above image to select which image shows</li>
    <li>This demo shows spectrograms with different window sizes
    </li></ul>
All the choice images are loaded before any are displayed.</p>
</div>
</body>
</html>